/*
  This file is automatically generated. Any changes will be overwritten.
  Modify infos.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { LabelComponent } from '@radzen/angular/dist/label';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { HtmlComponent } from '@radzen/angular/dist/html';

import { ConfigService } from '../config.service';
import { MeldungLoeschenComponent } from '../meldung-loeschen/meldung-loeschen.component';

import { DbOptimoService } from '../db-optimo.service';

export class InfosGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('label2') label2: LabelComponent;
  @ViewChild('label3') label3: LabelComponent;
  @ViewChild('label5') label5: LabelComponent;
  @ViewChild('label0') label0: LabelComponent;
  @ViewChild('buttonRegistrierungLoeschen') buttonRegistrierungLoeschen: ButtonComponent;
  @ViewChild('html1') html1: HtmlComponent;
  @ViewChild('html0') html0: HtmlComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbOptimo: DbOptimoService;
  dsoDevice: any;
  htmlVersionen: any;
  htmlHandbuch: any;
  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbOptimo = this.injector.get(DbOptimoService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    window.scroll(0,0);

    this.dbOptimo.getInventurDeviceByDeviceId(null, Number(localStorage.getItem("globalDeviceID")))
    .subscribe((result: any) => {
      this.dsoDevice = result;
    }, (result: any) => {

    });

    this.dbOptimo.getInfotexteHtmls(`Code eq 'MobileVersionen'`, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.htmlVersionen = result.value[0].Inhalt;
    }, (result: any) => {

    });

    this.dbOptimo.getInfotexteHtmls(`Code eq 'MobileHandbuch'`, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.htmlHandbuch = result.value[0].Inhalt;
    }, (result: any) => {

    });
  }

  buttonRegistrierungLoeschenClick(event: any) {
    this.dialogService.open(MeldungLoeschenComponent, { parameters: {strMeldung: "Soll die aktuelle Registrierung für dieses Gerät gelöscht werden?"}, title: `Registrierung` })
        .afterClosed().subscribe(result => {
              if (result == 'Löschen') {
        this.dsoDevice.RegistriertAm = null;
this.dsoDevice.AnmeldungAm = null;
this.dsoDevice.AbmeldungAm = null;
      }

      if (result == 'Löschen') {
              this.dbOptimo.updateInventurDevice(null, this.dsoDevice.DeviceID, this.dsoDevice)
        .subscribe((result: any) => {
              this.notificationService.notify({ severity: "success", summary: ``, detail: `Registrierung gelöscht` });

        localStorage.setItem("globalDeviceID","0")

        this.dsoDevice = null;
        }, (result: any) => {
              this.notificationService.notify({ severity: "error", summary: ``, detail: `Registrierung konnte nicht gelöscht werden!` });
        });
      }
    });
  }
}
