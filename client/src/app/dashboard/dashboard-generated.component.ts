/*
  This file is automatically generated. Any changes will be overwritten.
  Modify dashboard.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { DataListComponent } from '@radzen/angular/dist/datalist';
import { CardComponent } from '@radzen/angular/dist/card';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { LabelComponent } from '@radzen/angular/dist/label';
import { IconComponent } from '@radzen/angular/dist/icon';
import { ButtonComponent } from '@radzen/angular/dist/button';

import { ConfigService } from '../config.service';
import { MeldungOkComponent } from '../meldung-ok/meldung-ok.component';

import { DbOptimoService } from '../db-optimo.service';

export class DashboardGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('datalistLagerorte') datalistLagerorte: DataListComponent;
  @ViewChild('card8') card8: CardComponent;
  @ViewChild('heading8') heading8: HeadingComponent;
  @ViewChild('heading1') heading1: HeadingComponent;
  @ViewChild('heading2') heading2: HeadingComponent;
  @ViewChild('label0') label0: LabelComponent;
  @ViewChild('buttonNavigateToErfassen') buttonNavigateToErfassen: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbOptimo: DbOptimoService;
  onClickStartErfassen: any;
  onClickStartInfos: any;
  strDeviceNummer: any;
  dsoDevice: any;
  parameters: any;
  rstLagerorte: any;
  rstLagerorteCount: any;
  globalDeviceNummer: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbOptimo = this.injector.get(DbOptimoService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.datalistLagerorte.load();

    this.onClickStartErfassen = (data) => {
    this.buttonNavigateToErfassenClick(data);
};

    this.onClickStartInfos = () => {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.router.navigate(['infos']);
};

    this.strDeviceNummer = localStorage.getItem("globalDeviceNummer");

    this.dbOptimo.getInventurDevices(`DeviceNummer eq ${this.strDeviceNummer}`, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.dsoDevice = result.value[0];
    }, (result: any) => {

    });
  }

  datalistLagerorteLoadData(event: any) {
    this.dbOptimo.getInventurBases(null, null, null, `LagerortNummer, LagerortTitel`, null, `InventurBasisStatus`, null, null)
    .subscribe((result: any) => {
      this.rstLagerorte = result.value;

      this.rstLagerorteCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  buttonNavigateToErfassenClick(event: any) {
    this.globalDeviceNummer = localStorage.getItem("globalDeviceNummer");

    sessionStorage.setItem("globalArtikelID", "0");

    if (event.LagerortStatus == 'Erfassung offen' && this.globalDeviceNummer != null) {
      if (this.dialogRef) {
        this.dialogRef.close();
      }
      this.router.navigate(['erfassen', event.InventurID]);
    }

    if (event.LagerortStatus == 'Erfassung abgeschlossen' && this.globalDeviceNummer != null) {
      this.notificationService.notify({ severity: "error", summary: `Erfassung abgeschlossen`, detail: `Die Erfassung für diesen Lagerort wurde bereits abgeschlossen!`, duration: 5000 });
    }

    if (event.LagerortStatus == 'Erfassung zur Zeit gesperrt' && this.globalDeviceNummer != null) {
      this.notificationService.notify({ severity: "error", summary: `Erfassung zur Zeit gesperrt`, detail: `Die Erfassung ist zur Zeit gesperrt, weil ein Mitarbeiter für diesen Lagerort gerade Daten erfasst!`, duration: 5000 });
    }

    if (this.globalDeviceNummer == null) {
      this.dialogService.open(MeldungOkComponent, { parameters: {strMeldung: "Dieses Gerät wurde noch nicht angemeldet. Nach Bestätigung dieser Benachrichtigung wird ein Dialogfenster mit den verfügbaren Geräte Anmeldungen geöffnet. Wählen Sie die passende Gerätenummer für Ihr Gerät aus. Nach der Auswahl ist dieses Gerät automatisch unter der gewählten Gerätenummer angemeldet."}, title: `Info Gerät` })
          .afterClosed().subscribe(result => {
                  if (result == 'OK') {
          if (this.dialogRef) {
            this.dialogRef.close();
          }
          this.router.navigate(['device-anmelden']);
        }
      });
    }
  }
}
